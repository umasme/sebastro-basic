import pyrealsense2 as rs
import numpy as np
import open3d as o3d

# Configure the RealSense pipeline
pipeline = rs.pipeline()
config = rs.config()
config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)
config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)

# Start the pipeline
pipeline.start(config)

# Wait for frames
frames = pipeline.wait_for_frames()
depth_frame = frames.get_depth_frame()
color_frame = frames.get_color_frame()

if depth_frame and color_frame:
    # Convert depth frame to numpy array
    depth_image = np.asanyarray(depth_frame.get_data())

    # Convert color frame to numpy array
    color_image = np.asanyarray(color_frame.get_data())

    # Create point cloud from depth
    pc = rs.pointcloud()
    pc.map_to(color_frame)
    points = pc.calculate(depth_frame)

    # Extract vertices and colors
    vertices = np.asanyarray(points.get_vertices()).view(np.float32).reshape(-1, 3)  # 3D points
    colors = np.asanyarray(points.get_texture_coordinates()).view(np.float32).reshape(-1, 2)  # Texture mapping

    # Normalize colors
    colors_rgb = []
    for tex_coords in colors:
        u, v = tex_coords[0], tex_coords[1]
        if 0 <= u < 1 and 0 <= v < 1:  # Ensure valid texture coordinates
            x = int(u * color_frame.get_width())
            y = int(v * color_frame.get_height())
            colors_rgb.append(color_image[y, x] / 255.0)  # Normalize to 0-1
        else:
            colors_rgb.append([0, 0, 0])  # Default color for invalid texture coordinates

    # Create Open3D point cloud
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(vertices)
    pcd.colors = o3d.utility.Vector3dVector(colors_rgb)

    # Save point cloud to file
    o3d.io.write_point_cloud("point_cloud.pcd", pcd)
    print("Point cloud saved as 'point_cloud.pcd'")

    # Visualize point cloud (optional - comment out if you don't want to see it)
    o3d.visualization.draw_geometries([pcd])

# Stop the pipeline
pipeline.stop()
